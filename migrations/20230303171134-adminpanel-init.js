'use strict';
// sql template autogenerated by gen-db-migrates

var async = require('async')
var dbm;
var type;
var seed;

/**
* We receive the dbmigrate dependency from dbmigrate initially.
* This enables us to not have to rely on NODE_PATH.
*/
exports.setup = function(options, seedLink) {
  dbm = options.dbmigrate;
  type = dbm.dataType;
  seed = seedLink;
};

exports.up = function (db, callback) {
  async.series([
    (cb) => db.createTable('groupap', {
    columns: {
    "id": {
        "type": "int",
        "autoIncrement": true,
        "primaryKey": true
    },
    "name": {
        "type": "string",
        "unique": true
    },
    "description": {
        "type": "string"
    },
    "tokens": {
        "type": "json"
    },
    "createdAt": {
        "type": "bigint"
    },
    "updatedAt": {
        "type": "bigint"
    }
},
    ifNotExists: true
  }, cb),
(cb) => db.createTable('userap', {
    columns: {
    "id": {
        "type": "int",
        "autoIncrement": true,
        "primaryKey": true
    },
    "login": {
        "type": "string",
        "unique": true
    },
    "fullName": {
        "type": "string"
    },
    "email": {
        "type": "string"
    },
    "passwordHashed": {
        "type": "string"
    },
    "password": {
        "type": "string"
    },
    "timezone": {
        "type": "string"
    },
    "expires": {
        "type": "string"
    },
    "locale": {
        "type": "string"
    },
    "isDeleted": {
        "type": "boolean"
    },
    "isActive": {
        "type": "boolean"
    },
    "isAdministrator": {
        "type": "boolean"
    },
    "createdAt": {
        "type": "bigint"
    },
    "updatedAt": {
        "type": "bigint"
    }
},
    ifNotExists: true
  }, cb),
(cb) => db.createTable('groupap_users__userap_groups', {
    columns: {
    "id": {
        "type": "int",
        "notNull": true,
        "autoIncrement": true
    },
    "groupap_users": {
        "type": "number"
    },
    "userap_groups": {
        "type": "number"
    }
},
    ifNotExists: true
  }, cb),

  ], callback);
}

exports.down = function(db) {
  return null;
};

exports._meta = {
  "version": 1
};
